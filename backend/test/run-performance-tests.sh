#!/bin/bash

# Script complet pour les tests de performance
# Lance Artillery avec monitoring des ressources

echo "üöÄ TESTS DE PERFORMANCE - API GRAPHQL"
echo "======================================"
echo "Timestamp: $(date)"
echo ""

# V√©rifications pr√©alables
echo "üîç V√©rifications pr√©alables..."

# V√©rifier que le serveur tourne
if ! curl -s http://localhost:3001/graphql > /dev/null; then
    echo "‚ùå Le serveur n'est pas accessible sur http://localhost:3001"
    echo "   D√©marrez le serveur avec: npm run start:dev"
    exit 1
fi
echo "‚úÖ Serveur accessible"

# V√©rifier Artillery
if ! command -v artillery &> /dev/null; then
    echo "‚ùå Artillery non install√©"
    echo "   Installez avec: npm install -g artillery"
    exit 1
fi
echo "‚úÖ Artillery disponible"

# V√©rifier Docker (pour les stats des containers)
if ! command -v docker &> /dev/null; then
    echo "‚ö†Ô∏è  Docker non disponible - monitoring containers d√©sactiv√©"
    DOCKER_AVAILABLE=false
else
    echo "‚úÖ Docker disponible"
    DOCKER_AVAILABLE=true
fi

echo ""

# Cr√©er le dossier de rapports
mkdir -p reports/artillery

# Nom du fichier de rapport
REPORT_FILE="reports/artillery/performance_$(date +%Y%m%d_%H%M%S)"

echo "üìä Configuration du test:"
echo "  - Dur√©e totale: ~4 minutes (warmup + ramp + peak + stress)"
echo "  - Charge max: 15 requ√™tes/seconde"
echo "  - Sc√©narios: Create User (20%) + Create Conversation (30%) + Send Messages (50%)"
echo "  - Rapport: ${REPORT_FILE}.html"
echo ""

# Fonction de nettoyage
cleanup() {
    echo ""
    echo "üõë Arr√™t des tests..."
    if [ ! -z "$MONITOR_PID" ]; then
        kill $MONITOR_PID 2>/dev/null
    fi
    exit 0
}

# Intercepter CTRL+C
trap cleanup INT

# D√©marrer le monitoring en arri√®re-plan (si on est sur Linux/Mac)
if [[ "$OSTYPE" == "linux-gnu"* ]] || [[ "$OSTYPE" == "darwin"* ]]; then
    echo "üìà D√©marrage du monitoring des ressources..."
    ./test/performance-monitor.sh &
    MONITOR_PID=$!
    sleep 2
fi

echo "üî• Lancement des tests Artillery..."
echo ""

# Lancer Artillery avec rapport HTML
artillery run artillery.yml \
    --output "${REPORT_FILE}.json" \
    --config '{"target": "http://localhost:3001/graphql"}' \
    | tee "${REPORT_FILE}.log"

# G√©n√©rer le rapport HTML
echo ""
echo "üìä G√©n√©ration du rapport HTML..."
artillery report "${REPORT_FILE}.json" --output "${REPORT_FILE}.html"

# Arr√™ter le monitoring
if [ ! -z "$MONITOR_PID" ]; then
    kill $MONITOR_PID 2>/dev/null
fi

echo ""
echo "‚úÖ TESTS TERMIN√âS !"
echo "=================="
echo "üìÅ Fichiers g√©n√©r√©s:"
echo "  - Rapport HTML: ${REPORT_FILE}.html"
echo "  - Logs d√©taill√©s: ${REPORT_FILE}.log"
echo "  - Donn√©es JSON: ${REPORT_FILE}.json"

if [[ "$OSTYPE" == "linux-gnu"* ]] || [[ "$OSTYPE" == "darwin"* ]]; then
    echo "  - Monitoring syst√®me: reports/performance/metrics_*.log"
fi

echo ""
echo "üéØ M√âTRIQUES CL√âS √Ä ANALYSER:"
echo "  1. Temps de r√©ponse p95/p99 des mutations sendMessage"
echo "  2. Taux d'erreur (doit √™tre < 1%)"  
echo "  3. D√©bit max support√© (req/sec)"
echo "  4. Utilisation CPU/RAM du serveur"
echo "  5. Performance de la base de donn√©es"
echo ""
echo "üåê Ouvrez le rapport: ${REPORT_FILE}.html" 